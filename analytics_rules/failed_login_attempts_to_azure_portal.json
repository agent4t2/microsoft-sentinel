{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/<GUID>')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/<GUID>')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "Failed login attempts to Azure Portal",
                "description": "Identifies failed login attempts in the Microsoft Entra ID SigninLogs to the Azure Portal.  Many failed logon attempts or some failed logon attempts from multiple IPs could indicate a potential brute force attack.\nThe following are excluded due to success and non-failure results:\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n0 - successful logon\n50125 - Sign-in was interrupted due to a password reset or password registration entry.\n50140 - This error occurred due to 'Keep me signed in' interrupt when the user was signing-in.",
                "severity": "Medium",
                "enabled": true,
                "query": "let timeRange = 4h;\nlet lookBack = 7d;\nlet threshold_Failed = 15; // Increased from 10 to reduce noise\nlet threshold_FailedwithSingleIP = 30; // Increased from 20\nlet threshold_IPAddressCount = 3; // Increased from 2\nlet isGUID = \"[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}\";\nlet excludedResultTypes = dynamic([\"0\", \"50078\", \"50097\", \"50125\", \"50140\", \"50173\", \"70044\", \"70043\", \"700084\", \"50074\", \"50158\"]);\nlet aadFunc = (tableName: string) {\n    let azPortalSignins = materialize(\n        table(tableName)\n        | where TimeGenerated >= ago(lookBack)\n        | where AppDisplayName =~ \"Azure Portal\"\n        );\n    let successPortalSignins = azPortalSignins\n        | where TimeGenerated >= ago(timeRange)\n        | where ResultType in (\"0\", \"50097\", \"50125\", \"50140\") // Only allow genuine successful logins\n        | distinct UserPrincipalName, TimeGenerated;\n    let failPortalSignins = azPortalSignins\n        | where TimeGenerated >= ago(timeRange)\n        | where ResultType !in (excludedResultTypes) // Exclude common MFA failures\n        | extend Unresolved = iff(Identity matches regex isGUID, true, false);\n    let failnoSuccess = failPortalSignins \n        | join kind= leftouter (successPortalSignins) on UserPrincipalName\n        | where isempty(TimeGenerated1) or TimeGenerated > TimeGenerated1\n        | project-away TimeGenerated1;\n    let identityLookup = azPortalSignins\n        | where TimeGenerated >= ago(lookBack)\n        | where not(Identity matches regex isGUID)\n        | summarize\n            by\n            UserId,\n            lu_UserDisplayName = UserDisplayName,\n            lu_UserPrincipalName = UserPrincipalName;\n    let unresolvedNames = failnoSuccess\n        | where Unresolved == true\n        | join kind= inner (identityLookup) on UserId\n        | extend UserDisplayName = lu_UserDisplayName, UserPrincipalName = lu_UserPrincipalName\n        | project-away lu_UserDisplayName, lu_UserPrincipalName;\n    let u_azPortalSignins = failnoSuccess \n        | where Unresolved == false \n        | union unresolvedNames;    \n    u_azPortalSignins\n    | extend\n        DeviceDetail = todynamic(DeviceDetail),\n        LocationDetails = todynamic(LocationDetails)\n    | extend\n        OS = tostring(DeviceDetail.operatingSystem), \n        Browser = tostring(DeviceDetail.browser),\n        State = tostring((LocationDetails.state)), \n        City = tostring((LocationDetails.city))\n    | summarize \n        StartTime = min(TimeGenerated), \n        EndTime = max(TimeGenerated),\n        Status = make_list(Status, 100), \n        IPAddresses = make_list(IPAddress, 100), \n        IPAddressCount = dcount(IPAddress), \n        FailedLogonCount = count()\n        by UserPrincipalName, UserId, UserDisplayName, AppDisplayName, Browser, OS, City, Type\n    | where (IPAddressCount >= threshold_IPAddressCount and FailedLogonCount >= threshold_Failed) or FailedLogonCount >= threshold_FailedwithSingleIP\n    | extend\n        Name = tostring(split(UserPrincipalName, '@', 0)[0]), \n        UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt",
                "queryFrequency": "PT4H",
                "queryPeriod": "P7D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1110"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": "<GUID>",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {
                    "alertDynamicProperties": []
                },
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "FullName",
                                "columnName": "UserPrincipalName"
                            },
                            {
                                "identifier": "Name",
                                "columnName": "Name"
                            },
                            {
                                "identifier": "UPNSuffix",
                                "columnName": "UPNSuffix"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddresses"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.7"
            }
        }
    ]
}