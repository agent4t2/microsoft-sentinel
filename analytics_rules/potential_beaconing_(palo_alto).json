{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/<GUID>')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/<GUID>')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "Potential Beaconing (Palo Alto)",
                "description": "Detects potential beaconing by examining Palo Alto Traffic Logs",
                "severity": "Low",
                "enabled": true,
                "query": "// Author: Cyb3rMonk(https://twitter.com/Cyb3rMonk, https://mergene.medium.com)\n// Link to original post:\n// Part-1: https://mergene.medium.com/enterprise-scale-threat-hunting-network-beacon-detection-with-unsupervised-machine-learning-and-277c4c30304f\n// Part-2: https://mergene.medium.com/enterprise-scale-threat-hunting-network-beacon-detection-with-unsupervised-ml-and-kql-part-2-bff46cfc1e7e\n//\n// Read the blog to understand how this query works and how to analyze the results.\n// This query may not be able to detect beacons that have large sleep values like 6h-1d. Refactoring and additional analysis are required. \n//\n// Query parameters:\nlet starttime = 1d;\nlet endtime = 1s;\n// Set the minimum beacon sleep. Increase it to get less results. the format is (hour,minute,second.milisecond).\n// Be careful when changing the value. run \" print ['timespan'] = make_timespan(0, x, y) \" to verify you have the correct value set. \nlet TimeDeltaThresholdMin = make_timespan(0,0,0.001); \nlet TotalEventsThresholdMin = 15;\nlet TotalEventsThresholdMax=toint(((totimespan(starttime) - totimespan(endtime))/TimeDeltaThresholdMin));\nlet JitterThreshold = 50; // jitter in percentage. Set to filter out false positives: small threshold means tighter filtering/fewer results.\n// Outlier thresholds. 1.5 means the value is a normal outlier, 3 means the value is far far out.\nlet OutlierThresholdMax = 2; //increase or decrease this value to get more or less results\n// Time delta data set can have some outliers. Define how many outliers are acceptable for a beacon. Values between 1 to 3 should be fine.\nlet OutlierCountMax = 2; // increasing the value provides more results.\n// Define how many devices can have the same beacon. \nlet CompromisedDeviceCountMax = 10; // increasing the value provides more results. \n// Get all beacon candidates just by jitter filtering.\nlet BeaconCandidates = materialize (\n    CommonSecurityLog\n    | where DeviceVendor == \"Palo Alto Networks\"\n    | where TimeGenerated between (ago(starttime)..ago(endtime)) and isnotempty(SourceUserName)\n    | where Activity == \"TRAFFIC\" and DeviceAction == \"allow\"\n    | where not(ipv4_is_private(DestinationIP))\n    | where not (DestinationHostName has_any (\"www.msftconnecttest.com\",\"mp.microsoft.com\")) // exclude known trusted destinations. \n    | summarize hint.strategy=shuffle make_set(TimeGenerated), make_list(SentBytes), make_list(ReceivedBytes), TotalDuration=sum(DeviceCustomNumber3) by  SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory=DeviceCustomString2\n    | where array_length( set_TimeGenerated) > TotalEventsThresholdMin and array_length(set_TimeGenerated) < TotalEventsThresholdMax\n    | project SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory, list_SentBytes, list_ReceivedBytes, TimeGenerated = array_sort_asc(set_TimeGenerated), TotalDuration\n    | mv-apply TimeGenerated to typeof(datetime) on \n    (     \n        extend nextTimeGenerated = next(TimeGenerated, 1), nextSourceUserName = next(SourceUserName, 1),nextSourceHostName = next(SourceHostName, 1) , nextDestinationHostCF = next(DestinationHostName, 1), nextDestinationIP = next(DestinationIP, 1)\n        | extend TimeDeltaInSeconds = datetime_diff('second',nextTimeGenerated,TimeGenerated)\n        | where SourceUserName == nextSourceUserName and nextSourceHostName == SourceHostName and nextDestinationHostCF == DestinationHostName and nextDestinationIP == DestinationIP\n        | project TimeGenerated, TimeDeltaInSeconds, SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort\n        | summarize count(), min(TimeGenerated), max(TimeGenerated),\n                    percentiles(TimeDeltaInSeconds, 5, 25, 50, 75, 95), // percentiles analyzes the distribution of the values. Can be used for making a decision or FP tuning.\n                    TimeDeltaList=make_list(TimeDeltaInSeconds) by SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort\n        | extend (TimeDeltaInSeconds_min,TimeDeltaInSeconds_min_index,TimeDeltaInSeconds_max,TimeDeltaInSeconds_max_index,TimeDeltaInSeconds_avg,TimeDeltaInSeconds_stdev,TimeDeltaInSeconds_variance) = series_stats(TimeDeltaList)\n        | extend JitterPercentage = (TimeDeltaInSeconds_stdev/TimeDeltaInSeconds_avg)*100,\n                 BeaconSleepMin = TimeDeltaInSeconds_avg - TimeDeltaInSeconds_stdev,\n                 BeaconSleepMax = TimeDeltaInSeconds_avg + TimeDeltaInSeconds_stdev\n        // Filter out impossible beacons based on jitter threshold defined.\n        | where JitterPercentage <= JitterThreshold\n    )\n)\n;\n// Get potential suspicious beacons based on CompromisedDeviceCountMax\nlet PotentialBeacons = materialize \n    (\n    BeaconCandidates\n    | summarize dcount(SourceUserName) by DestinationHostName, DestinationPort\n    // Filter out beacon destinations if many devices are connecting to the same destination (like windows update)\n    | where dcount_SourceUserName <= CompromisedDeviceCountMax\n    | join kind=inner BeaconCandidates on DestinationHostName, DestinationPort\n    | project-away *1\n    )\n    ;\n// Get candidates that can't be beacons based on outlier analysis on the time delta\nlet ImpossibleBeaconsByTimeDelta = materialize \n    (\n    PotentialBeacons\n    | extend outliers = series_outliers(TimeDeltaList)\n    | mv-expand TimeDeltaList, outliers to typeof(double)\n    | where outliers > OutlierThresholdMax or outliers < (-1 * OutlierCountMax) // outlier can be negative or positive.\n    | summarize count(), make_set(outliers) by SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory\n    | where count_ > OutlierCountMax\n    )\n    ;\n// Get candidates that can't be beacons based on outlier analysis on the sent bytes\nlet ImpossibleBeaconsBySentBytes = materialize \n    (\n    PotentialBeacons\n    | extend outliers = series_outliers(list_SentBytes)\n    | mv-expand list_SentBytes, outliers to typeof(double)\n    | where outliers > OutlierThresholdMax or outliers < (-1 * OutlierCountMax) // outlier can be negative or positive.\n    | summarize count(), make_set(outliers) by SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory\n    | where count_ > OutlierCountMax\n    )\n    ;\n// Get all potentially suspicious beacons\nlet SuspiciousBeacons = materialize (\n    PotentialBeacons\n    | join kind=leftantisemi ImpossibleBeaconsByTimeDelta on SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory\n    | join kind=leftantisemi ImpossibleBeaconsBySentBytes on SourceHostName, SourceUserName, DestinationHostName, DestinationIP, DestinationPort, ApplicationProtocol, URLCategory\n    // if the logs have extra information, they can be used for filtering the nonmalicious destinations\n    // | where URLCategory !in (\"Advertising\",\"Web search\",\"Video Streaming\")\n    // | where ApplicationProtocol !in (\"Dropbox\")\n    );\n// get prevalence data for the destinations(last14d)\nlet DestinationList = \n    SuspiciousBeacons\n    | summarize make_set(DestinationHostName)\n    ;\nlet PrevalanceData = \n    CommonSecurityLog\n    | where TimeGenerated between (ago(14d) .. ago(endtime)) // analyze the duration before the last beacon connection\n    | where DestinationHostName in (DestinationList)\n    | summarize hint.strategy=shuffle DestinationPrevalence = dcount(SourceUserName) by DestinationHostName\n    ;\n// Enrich suspicious beacons with the historical prevalence data for prioritization\nSuspiciousBeacons\n| join kind=leftouter PrevalanceData on DestinationHostName\n| sort by DestinationPrevalence asc\n| project-reorder DestinationPrevalence\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Persistence",
                    "CommandAndControl"
                ],
                "techniques": [],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "HostName",
                                "columnName": "SourceHostName"
                            }
                        ]
                    },
                    {
                        "entityType": "Host",
                        "fieldMappings": [
                            {
                                "identifier": "HostName",
                                "columnName": "DestinationHostName"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "DestinationIP"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}