{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/<GUID>')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/<GUID>')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "TI Map IP Entity IN to CommonSecurityLog",
                "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches to incoming traffic source IP in CommonSecurityLog.",
                "severity": "Medium",
                "enabled": true,
                "query": "let IPRegex = '[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}';\nlet dt_lookBack = 1h;\nlet ioc_lookBack = 3d;\nlet confidence_threshold = 95;\nlet ignoredactivity = dynamic([\"deny\", \"drop\"]);\nlet TrustedCIDRs = (_GetWatchlist('trustedcidr') | project TrustedCIDR = SearchKey);\nlet TrustedCIDRArray = toscalar(TrustedCIDRs | summarize make_set(TrustedCIDR));\nlet IP_Indicators = ThreatIntelIndicators\n    | extend IndicatorType = replace(@\"\\[|\\]|\\\"\"\", \"\", tostring(split(ObservableKey, \":\", 0)))\n    | where IndicatorType in (\"ipv4-addr\", \"ipv6-addr\", \"network-traffic\")\n    | extend NetworkSourceIP = toupper(ObservableValue)\n    | extend TrafficLightProtocolLevel = tostring(parse_json(AdditionalFields).TLPLevel)\n    | where TimeGenerated >= ago(ioc_lookBack)\n    | where Confidence >= confidence_threshold\n    | where TrafficLightProtocolLevel !in ('WHITE', '')\n    | extend TI_ipEntity = iff(isnotempty(NetworkSourceIP), NetworkSourceIP, NetworkSourceIP)\n    | where ipv4_is_private(TI_ipEntity) == false and  \n            TI_ipEntity !startswith \"fe80\" and \n            TI_ipEntity !startswith \"::\" and \n            TI_ipEntity !startswith \"127.\"\n    | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by Id, ObservableValue\n    | where IsActive and (ValidUntil > now() or isempty(ValidUntil))\n    | extend IsTrustedIP = ipv4_is_in_any_range(NetworkSourceIP, TrustedCIDRArray)\n    | where IsTrustedIP == false;\nIP_Indicators\n| join kind=innerunique (\n    CommonSecurityLog\n    | where TimeGenerated >= ago(dt_lookBack)\n    | where not(DeviceAction has_any (ignoredactivity))\n    | where ApplicationProtocol !in~ ('ping', 'incomplete', '', 'unknown')\n    | where isnotempty(SourceIP) and ipv4_is_private(SourceIP) == false\n    | extend CommonSecurityLog_TimeGenerated = TimeGenerated\n    | extend CS_ipEntity = SourceIP\n) on $left.TI_ipEntity == $right.CS_ipEntity\n| where CommonSecurityLog_TimeGenerated < ValidUntil\n// === Suppression Logic ===\n| summarize \n    FirstSeen = min(CommonSecurityLog_TimeGenerated), \n    LastSeen = max(CommonSecurityLog_TimeGenerated), \n    HitCount = count(), \n    any(SourceIP), any(DestinationIP), any(DeviceVendor), any(DeviceProduct), \n    any(Id), any(ValidUntil), any(Confidence), any(TI_ipEntity), any(LogSeverity), \n    any(DeviceAction), any(Type), any(ApplicationProtocol), any(DestinationPort), \n    any(TrafficLightProtocolLevel)\n  by CS_ipEntity\n| where HitCount <= 3  // adjust this threshold if needed\n| project \n    timestamp = LastSeen,\n    SourceIP = any_SourceIP,\n    DestinationIP = any_DestinationIP,\n    DeviceVendor = any_DeviceVendor,\n    DeviceProduct = any_DeviceProduct,\n    Id = any_Id,\n    ValidUntil = any_ValidUntil,\n    Confidence = any_Confidence,\n    TI_ipEntity = any_TI_ipEntity,\n    CS_ipEntity,\n    LogSeverity = any_LogSeverity,\n    DeviceAction = any_DeviceAction,\n    Type = any_Type,\n    ApplicationProtocol = any_ApplicationProtocol,\n    DestinationPort = any_DestinationPort,\n    TrafficLightProtocolLevel = any_TrafficLightProtocolLevel,\n    HitCount\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Impact",
                    "Discovery",
                    "Reconnaissance"
                ],
                "techniques": [
                    "T0826",
                    "T1007",
                    "T1016",
                    "T1046",
                    "T0846",
                    "T1590",
                    "T1592"
                ],
                "subTechniques": [],
                "alertRuleTemplateName": "<GUID>",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": true,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "P1D",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [
                            "IP"
                        ],
                        "groupByAlertDetails": [
                            "DisplayName"
                        ],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": {
                    "alertDynamicProperties": []
                },
                "customDetails": {
                    "Confidence": "Confidence",
                    "ValidUntil": "ValidUntil",
                    "Vendor": "DeviceVendor",
                    "HitCount": "HitCount",
                    "TrafficLightLevel": "TrafficLightProtocolLevel",
                    "Application": "ApplicationProtocol",
                    "Port": "DestinationPort"
                },
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "CS_ipEntity"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "TI_ipEntity"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.2.8"
            }
        }
    ]
}