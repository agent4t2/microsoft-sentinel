{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "##  Sentinel Data Ingestion Trends\n"
      },
      "name": "text - 2"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "PLACEHOLDER_SUBSCRIPTION_ID",
            "version": "KqlParameterItem/1.0",
            "name": "_lookback",
            "label": "Lookback Days",
            "type": 2,
            "description": "Choose Lookback Days",
            "isRequired": true,
            "typeSettings": {
              "additionalResourceOptions": [],
              "showDefault": false
            },
            "jsonData": "[{ \"label\": \"7\", \"value\": \"7d\" },\n{ \"label\": \"14\", \"value\": \"14d\" },\n{ \"label\": \"30\", \"value\": \"30d\" },\n{ \"label\": \"60\", \"value\": \"60d\" },\n{ \"label\": \"90\", \"value\": \"90d\" }]\n",
            "timeContext": {
              "durationMs": 86400000
            },
            "value": "30d"
          }
        ],
        "style": "pills",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 15"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    Usage\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | where IsBillable == true\n    | summarize DailyGB = sum(Quantity) / 1024 by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyGB));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyGB = avg(DailyGB) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyGB, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyGB to typeof(real), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(DailyGB > RollingAvg * 1.33, DailyGB, real(null))\n    | extend AnomalyBelow = iif(DailyGB < RollingAvg * 0.66, DailyGB, real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyGB, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Overall Billable Ingestion",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "query - 2",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    CommonSecurityLog\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Common Security Log",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "CommonSecurityLog",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    ASimDnsActivityLogs\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "ASIM DNS Activity Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "ASimDnsActivityLogs",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    Syslog\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Syslog",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Syslog",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    SecurityEvent\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Windows Security Events",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "SecurityEvent",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    CloudAppEvents\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "M365 Cloud App Events",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Cloud App Events",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    Event\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Windows Event Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Windows Events",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    DeviceProcessEvents\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "MDE Device Process Events",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Device Process Events",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    DeviceNetworkEvents\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "MDE Device Network Events",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Device Network Events ",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    traffic_CL\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Prisma Access Traffic",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Prisma Access Traffic",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    url_CL\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Prisma Access URL Events",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "Prisma Access URL ",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    GCPAuditLogs\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "GCP Audit Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "GCP Audit Logs",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    GKEApplication\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "GKE Application Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "GKE Application Logs",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    GKEAudit\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "GKE Audit Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "GKE Audit",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    GCPIAM\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "GCP IAM Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "GCP IAM",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    GoogleCloudSCC\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "Google Cloud SCC Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "GoogleCloudSCC",
      "styleSettings": {
        "showBorder": true
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "// Get daily totals\nlet lookback = {_lookback};\nlet DailyData =\n    AWSCloudTrail\n    | where TimeGenerated between (startofday(ago(lookback)) .. endofday(ago(1d)))\n    | summarize DailyCount = count() by bin(TimeGenerated, 1d);\n// Flat 90-day average as a scalar\nlet FlatAvg = toscalar(DailyData | summarize avg(DailyCount));\n// Build time series with rolling avg + anomaly flags\nlet SeriesData =\n    DailyData\n    | make-series DailyCount = avg(DailyCount) on TimeGenerated \n        from startofday(ago(lookback)) to endofday(ago(1d)) step 1d\n    | extend RollingAvg = series_fir(DailyCount, repeat(1.0/7, 7))\n    | mv-expand TimeGenerated to typeof(datetime), \n                DailyCount to typeof(long), \n                RollingAvg to typeof(real)\n    | serialize\n    | extend RowNumber = row_number()\n    | where RowNumber > 6   // drop first 6 rows (partial averages)\n    | extend FlatAvg = FlatAvg\n    | extend AnomalyAbove = iif(toreal(DailyCount) > RollingAvg * 1.33, toreal(DailyCount), real(null))\n    | extend AnomalyBelow = iif(toreal(DailyCount) < RollingAvg * 0.66, toreal(DailyCount), real(null))\n    | extend IsAnomaly = iif(isnotnull(AnomalyAbove) or isnotnull(AnomalyBelow), true, false);\n// Final dataset\nSeriesData\n| project TimeGenerated, DailyCount, RollingAvg, FlatAvg, AnomalyAbove, AnomalyBelow, IsAnomaly\n| render timechart\n",
        "size": 1,
        "aggregation": 3,
        "title": "AWS CloudTrail  Logs",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "customWidth": "50",
      "name": "query - 15",
      "styleSettings": {
        "showBorder": true
      }
    }
  ],
  "fallbackResourceIds": [
    "/subscriptions/PLACEHOLDER_SUBSCRIPTION_ID/resourcegroups/-useast-infosec-sentinel/providers/microsoft.operationalinsights/workspaces/-useast-infosec-sentinel-la"
  ],
  "fromTemplateId": "sentinel-UserWorkbook",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
